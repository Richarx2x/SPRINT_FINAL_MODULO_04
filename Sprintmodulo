import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

interface Asesoria {
    void analizarUsuario();
}

class Usuario {
    private String nombre;
    private String fechaNacimiento;
    private int run;

    @Override
    public String toString() {
        return "Nombre: " + nombre + "\n" +
                "Fecha de nacimiento: " + fechaNacimiento + "\n" +
                "RUN: " + run;
    }
}

class Cliente extends Usuario implements Asesoria {
    private int rut;
    private String nombres;
    private String apellidos;
    private String telefono;
    private String afp;
    private int sistemaSalud;
    private String direccion;
    private String comuna;
    private int edad;

    @Override
    public void analizarUsuario() {
        System.out.println("Analizando al cliente: " + getNombre());
    }

    @Override
    public String toString() {
        return super.toString() + "\n" +
                "RUT: " + rut + "\n" +
                "Nombres: " + nombres + "\n" +
                "Apellidos: " + apellidos + "\n" +
                "Teléfono: " + telefono + "\n" +
                "AFP: " + afp + "\n" +
                "Sistema de Salud: " + sistemaSalud + "\n" +
                "Dirección: " + direccion + "\n" +
                "Comuna: " + comuna + "\n" +
                "Edad: " + edad;
    }
}

class Profesional extends Usuario implements Asesoria {
    private String titulo;
    private String fechaIngreso;


    @Override
    public void analizarUsuario() {
        System.out.println("Analizando al profesional: " + getNombre());
        // Lógica específica para analizar a un profesional
    }

    @Override
    public String toString() {
        return super.toString() + "\n" +
                "Título: " + titulo + "\n" +
                "Fecha de ingreso: " + fechaIngreso;
    }
}

class Administrativo extends Usuario implements Asesoria {
    private String area;
    private String experienciaPrevia;


    @Override
    public void analizarUsuario() {
        System.out.println("Analizando al administrativo: " + getNombre());
    }

    @Override
    public String toString() {
        return super.toString() + "\n" +
                "Área: " + area + "\n" +
                "Experiencia previa: " + experienciaPrevia;
    }
}

class Capacitacion {
    private int identificador;
    private int rutCliente;
    private String dia;
    private String hora;
    private String lugar;
    private String duracion;
    private int cantidadAsistentes;

    @Override
    public String toString() {
        return "Identificador: " + identificador + "\n" +
                "RUT del Cliente: " + rutCliente + "\n" +
                "Día: " + dia + "\n" +
                "Hora: " + hora + "\n" +
                "Lugar: " + lugar + "\n" +
                "Duración: " + duracion + "\n" +
                "Cantidad de asistentes: " + cantidadAsistentes;
    }
}

class Contenedor {
    private List<Asesoria> asesorias;
    private List<Capacitacion> capacitaciones;

    public Contenedor() {
        asesorias = new ArrayList<>();
        capacitaciones = new ArrayList<>();
    }

    public void almacenarCliente(Cliente cliente) {
        asesorias.add(cliente);
    }

    public void almacenarProfesional(Profesional profesional) {
        asesorias.add(profesional);
    }

    public void almacenarAdministrativo(Administrativo administrativo) {
        asesorias.add(administrativo);
    }

    public void almacenarCapacitacion(Capacitacion capacitacion) {
        capacitaciones.add(capacitacion);
    }

    public void eliminarUsuario(int run) {
        for (Asesoria asesoria : asesorias) {
            if (asesoria instanceof Usuario && ((Usuario) asesoria).getRun() == run) {
                asesorias.remove(asesoria);
                break;
            }
        }
    }

    public void listarUsuarios() {
        for (Asesoria asesoria : asesorias) {
            if (asesoria instanceof Usuario) {
                System.out.println(((Usuario) asesoria).toString());
                System.out.println("--------------------");
            }
        }
    }

    public void listarUsuariosPorTipo(String tipo) {
        for (Asesoria asesoria : asesorias) {
            if (asesoria instanceof Usuario) {
                Usuario usuario = (Usuario) asesoria;
                if (tipo.equalsIgnoreCase("cliente") && usuario instanceof Cliente) {
                    System.out.println(usuario.toString());
                    System.out.println("--------------------");
                } else if (tipo.equalsIgnoreCase("administrativo") && usuario instanceof Administrativo) {
                    System.out.println(usuario.toString());
                    System.out.println("--------------------");
                } else if (tipo.equalsIgnoreCase("profesional") && usuario instanceof Profesional) {
                    System.out.println(usuario.toString());
                    System.out.println("--------------------");
                }
            }
        }
    }

    public void listarCapacitaciones() {
        for (Capacitacion capacitacion : capacitaciones) {
            System.out.println(capacitacion.toString());
            System.out.println("--------------------");
        }
    }
}

public class Principal {
    public static void main(String[] args) {
        Contenedor contenedor = new Contenedor();
        Scanner scanner = new Scanner(System.in);
        boolean salir = false;

        while (!salir) {
            System.out.println("--- Menú Principal ---");
            System.out.println("1. Almacenar Cliente");
            System.out.println("2. Almacenar Profesional");
            System.out.println("3. Almacenar Administrativo");
            System.out.println("4. Almacenar Capacitación");
            System.out.println("5. Eliminar Usuario");
            System.out.println("6. Listar Usuarios");
            System.out.println("7. Listar Usuarios por Tipo");
            System.out.println("8. Listar Capacitaciones");
            System.out.println("9. Salir");

            System.out.print("Ingrese la opción deseada: ");
            int opcion = scanner.nextInt();
            scanner.nextLine(); // Consumir el salto de línea

            switch (opcion) {
                case 1:
                    crearCliente(contenedor, scanner);
                    break;
                case 2:
                    crearProfesional(contenedor, scanner);
                    break;
                case 3:
                    crearAdministrativo(contenedor, scanner);
                    break;
                case 4:
                    crearCapacitacion(contenedor, scanner);
                    break;
                case 5:
                    eliminarUsuario(contenedor, scanner);
                    break;
                case 6:
                    contenedor.listarUsuarios();
                    break;
                case 7:
                    listarUsuariosPorTipo(contenedor, scanner);
                    break;
                case 8:
                    contenedor.listarCapacitaciones();
                    break;
                case 9:
                    salir = true;
                    System.out.println("Gracias por usar nuestro sistema, hasta luego");
                    break;
                default:
                    System.out.println("Opcion no valida. Por favor, ingrese una opcion del menu");
                    break;
            }
            System.out.println("--------------------");
        }
    }

    private static void crearCliente(Contenedor contenedor, Scanner scanner) {
        // Lógica para solicitar los datos del cliente al usuario
        // y crear un objeto de la clase Cliente
        Cliente cliente = new Cliente();
        // Asignar los valores correspondientes a los atributos del cliente
        contenedor.almacenarCliente(cliente);
        System.out.println("Cliente almacenado exitosamente.");
    }

    private static void crearProfesional(Contenedor contenedor, Scanner scanner) {
        // Lógica para solicitar los datos del profesional al usuario
        // y crear un objeto de la clase Profesional
        Profesional profesional = new Profesional();
        // Asignar los valores correspondientes a los atributos del profesional
        contenedor.almacenarProfesional(profesional);
        System.out.println("Profesional almacenado exitosamente.");
    }

    private static void crearAdministrativo(Contenedor contenedor, Scanner scanner) {
        // Lógica para solicitar los datos del administrativo al usuario
        // y crear un objeto de la clase Administrativo
        Administrativo administrativo = new Administrativo();
        // Asignar los valores correspondientes a los atributos del administrativo
        contenedor.almacenarAdministrativo(administrativo);
        System.out.println("Administrativo almacenado exitosamente.");
    }

    private static void crearCapacitacion(Contenedor contenedor, Scanner scanner) {
        // Lógica para solicitar los datos de la capacitación al usuario
        // y crear un objeto de la clase Capacitacion
        Capacitacion capacitacion = new Capacitacion();
        // Asignar los valores correspondientes a los atributos de la capacitación
        contenedor.almacenarCapacitacion(capacitacion);
        System.out.println("Capacitación almacenada exitosamente.");
    }

    private static void eliminarUsuario(Contenedor contenedor, Scanner scanner) {
        System.out.print("Ingrese el RUN del usuario a eliminar: ");
        int run = scanner.nextInt();
        scanner.nextLine(); // Consumir el salto de línea

        contenedor.eliminarUsuario(run);
        System.out.println("Usuario eliminado exitosamente.");
    }

    private static void listarUsuariosPorTipo(Contenedor contenedor, Scanner scanner) {
        System.out.print("Ingrese el tipo de usuario (cliente, profesional, administrativo): ");
        String tipo = scanner.nextLine();

        contenedor.listarUsuariosPorTipo(tipo);
    }
}

// tipo Cliente
class Cliente extends Usuario {
    private int rut;
    private String nombres;
    private String apellidos;
    private String telefono;
    private String afp;
    private int sistemaSalud;
    private String direccion;
    private String comuna;
    private int edad;

    public Cliente() {}

    public Cliente(String nombre, Date fechaNacimiento, int run, int rut, String nombres, String apellidos, String telefono, String afp, int sistemaSalud, String direccion, String comuna, int edad) {
        super(nombre, fechaNacimiento, run);
        this.rut = rut;
        this.nombres = nombres;
        this.apellidos = apellidos;
        this.telefono = telefono;
        this.afp = afp;
        this.sistemaSalud = sistemaSalud;
        this.direccion = direccion;
        this.comuna = comuna;
        this.edad = edad;
    }

    // Métodos de acceso para los atributos específicos de Cliente

    public int getRut() {
        return rut;
    }

    public void setRut(int rut) {
        this.rut = rut;
    }

    public String getNombres() {
        return nombres;
    }

    public void setNombres(String nombres) {
        this.nombres = nombres;
    }

    public String getApellidos() {
        return apellidos;
    }

    public void setApellidos(String apellidos) {
        this.apellidos = apellidos;
    }

    public String getTelefono() {
        return telefono;
    }

    public void setTelefono(String telefono) {
        this.telefono = telefono;
    }

    public String getAfp() {
        return afp;
    }

    public void setAfp(String afp) {
        this.afp = afp;
    }

    public int getSistemaSalud() {
        return sistemaSalud;
    }

    public void setSistemaSalud(int sistemaSalud) {
        this.sistemaSalud = sistemaSalud;
    }

    public String getDireccion() {
        return direccion;
    }

    public void setDireccion(String direccion) {
        this.direccion = direccion;
    }

    public String getComuna() {
        return comuna;
    }

    public void setComuna(String comuna) {
        this.comuna = comuna;
    }

    public int getEdad() {
        return edad;
    }

    public void setEdad(int edad) {
        this.edad = edad;
    }

    @Override
    public String toString() {
        String sistemaSaludStr = (sistemaSalud == 1) ? "Fonasa" : "Isapre";
        return super.toString() + "\nRUT: " + rut + "\nNombres: " + nombres + "\nApellidos: " + apellidos + "\nTeléfono: " + telefono + "\nAFP: " + afp + "\nSistema de Salud: " + sistemaSaludStr + "\nDirección: " + direccion + "\nComuna: " + comuna + "\nEdad: " + edad;
    }
}
//tipo profesional
class Profesional extends Usuario {
    private String titulo;
    private Date fechaIngreso;

    public Profesional() {}

    public Profesional(String nombre, Date fechaNacimiento, int run, String titulo, Date fechaIngreso) {
        super(nombre, fechaNacimiento, run);
        this.titulo = titulo;
        this.fechaIngreso = fechaIngreso;
    }

    // Métodos de acceso para los atributos específicos de Profesional

    public String getTitulo() {
        return titulo;
    }

    public void setTitulo(String titulo) {
        this.titulo = titulo;
    }

    public Date getFechaIngreso() {
        return fechaIngreso;
    }

    public void setFechaIngreso(Date fechaIngreso) {
        this.fechaIngreso = fechaIngreso;
    }

    @Override
    public String toString() {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        String fechaIngresoStr = sdf.format(fechaIngreso);
        return super.toString() + "\nTítulo: " + titulo + "\nFecha de Ingreso: " + fechaIngresoStr;
    }
}
// tipo administrativo
class Administrativo extends Usuario {
    private String area;
    private String experienciaPrevia;

    public Administrativo() {}

    public Administrativo(String nombre, Date fechaNacimiento, int run, String area, String experienciaPrevia) {
        super(nombre, fechaNacimiento, run);
        this.area = area;
        this.experienciaPrevia = experienciaPrevia;
    }

    // Métodos de acceso para los atributos específicos de Administrativo

    public String getArea() {
        return area;
    }

    public void setArea(String area) {
        this.area = area;
    }

    public String getExperienciaPrevia() {
        return experienciaPrevia;
    }

    public void setExperienciaPrevia(String experienciaPrevia) {
        this.experienciaPrevia = experienciaPrevia;
    }

    @Override
    public String toString() {
        return super.toString() + "\nÁrea: " + area + "\nExperiencia Previa: " + experienciaPrevia;
    }
}
// Capacitacion
class Capacitacion {
    private int identificador;
    private int rutCliente;
    private String dia;
    private String hora;
    private String lugar;
    private String duracion;
    private int cantidadAsistentes;

    public Capacitacion(int identificador, int rutCliente, String dia, String hora, String lugar, String duracion, int cantidadAsistentes) {
        this.identificador = identificador;
        this.rutCliente = rutCliente;
        this.dia = dia;
        this.hora = hora;
        this.lugar = lugar;
        this.duracion = duracion;
        this.cantidadAsistentes = cantidadAsistentes;
    }

    // Métodos de acceso para los atributos de Capacitacion

    public int getIdentificador() {
        return identificador;
    }

    public void setIdentificador(int identificador) {
        this.identificador = identificador;
    }

    public int getRutCliente() {
        return rutCliente;
    }

    public void setRutCliente(int rutCliente) {
        this.rutCliente = rutCliente;
    }

    public String getDia() {
        return dia;
    }

    public void setDia(String dia) {
        this.dia = dia;
    }

    public String getHora() {
        return hora;
    }

    public void setHora(String hora) {
        this.hora = hora;
    }

    public String getLugar() {
        return lugar;
    }

    public void setLugar(String lugar) {
        this.lugar = lugar;
    }

    public String getDuracion() {
        return duracion;
    }

    public void setDuracion(String duracion) {
        this.duracion = duracion;
    }

    public int getCantidadAsistentes() {
        return cantidadAsistentes;
    }

    public void setCantidadAsistentes(int cantidadAsistentes) {
        this.cantidadAsistentes = cantidadAsistentes;
    }
}
// Accidente
class Accidente {
    private int identificador;
    private int rutCliente;
    private Date dia;
    private String hora;
    private String lugar;
    private String origen;
    private String consecuencias;

    public Accidente(int identificador, int rutCliente, Date dia, String hora, String lugar, String origen, String consecuencias) {
        this.identificador = identificador;
        this.rutCliente = rutCliente;
        this.dia = dia;
        this.hora = hora;
        this.lugar = lugar;
        this.origen = origen;
        this.consecuencias = consecuencias;
    }

    // Métodos de acceso para los atributos de Accidente

    public int getIdentificador() {
        return identificador;
    }

    public void setIdentificador(int identificador) {
        this.identificador = identificador;
    }

    public int getRutCliente() {
        return rutCliente;
    }

    public void setRutCliente(int rutCliente) {
        this.rutCliente = rutCliente;
    }

    public Date getDia() {
        return dia;
    }

    public void setDia(Date dia) {
        this.dia = dia;
    }

    public String getHora() {
        return hora;
    }

    public void setHora(String hora) {
        this.hora = hora;
    }

    public String getLugar() {
        return lugar;
    }

    public void setLugar(String lugar) {
        this.lugar = lugar;
    }

    public String getOrigen() {
        return origen;
    }

    public void setOrigen(String origen) {
        this.origen = origen;
    }

    public String getConsecuencias() {
        return consecuencias;
    }

    public void setConsecuencias(String consecuencias) {
        this.consecuencias = consecuencias;
    }
}
// Visita Terreno
class VisitaTerreno {
    private int identificador;
    private int rutCliente;
    private Date dia;
    private String hora;
    private String lugar;
    private String comentarios;

    public VisitaTerreno(int identificador, int rutCliente, Date dia, String hora, String lugar, String comentarios) {
        this.identificador = identificador;
        this.rutCliente = rutCliente;
        this.dia = dia;
        this.hora = hora;
        this.lugar = lugar;
        this.comentarios = comentarios;
    }

    // Métodos de acceso para los atributos de VisitaTerreno

    public int getIdentificador() {
        return identificador;
    }

    public void setIdentificador(int identificador) {
        this.identificador = identificador;
    }

// validador identificador visita en Terreno

    public static void validarIdentificador(int identificador){
        while (true){
            // se hace la validacion dentro del bucle
            if (identificador > 0){
                //al ser la validacion exitosa sale del bucle //
                System.out.println("El identificador es válido: " + identificador);
                break;

            } else{
                // si la validacion no se cumple arrojara error
                System.out.println("El identificador se ser mayor a 0, Inténtalo de nuevamente");
                return;
            }
        }
    }

    public int getRutCliente() {
        return rutCliente;
    }

    public void setRutCliente(int rutCliente) {
        this.rutCliente = rutCliente;
    }
// validador Rut cliente

  public static void validarRutCliente(int rutCliente){
        Scanner scanner = new Scanner(System.in);
        while (true){
            // se solicitaria el rut del cliente al usuario
            //System.out.print("Ingrese el RUT del cliente: ");
            //       rutCliente = scanner.nextInt();
            //luego se realiza la validacion dentro del bucle//
            if (rutCliente > 0 && rutCliente < 99999999){
                // si la validacion es correcta, sale del bucle//
                System.out.println("rut del cliente es valido: " + rutCliente);
                break;
            } else {
                //si las condiciones no se cumplen arrojara error
                System.out.println("campo obligatorio e ingrese rut menor de 99.999.999 , intente nuevamente ");
                return;
            }
        }
    }

    public Date getDia() {
        return dia;
    }

    public void setDia(Date dia) {
        this.dia = dia;
    }

//validador dia

  public static void validarDia(String dia){
        while(true){
            // se realiza validacion dentro del bucle/
            if(dia.matches("^\\d{2}/\\d{2}/\\d{4}$")){
                // la validacion es exitosa se sale del bucle//
                System.out.println("validacion de dia exitosa: " + dia);
                break;
            } else{
                // si las condiciones no se cumplen mandara mensaje de error //
                System.out.println("El dia debe tener formato DD/MM/AAAA, intente nuevamente");
            }    return;
        }

    }

    public String getHora() {
        return hora;
    }

    public void setHora(String hora) {
        this.hora = hora;
    }
//validador de hora

   public class ValidadorHora {
        public static boolean validarFormatoHora(String hora) {
            String patron = "^([01]?\\d|2[0-3]):[0-5]\\d$";
            return Pattern.matches(patron, hora);
        }
    }

    public String getLugar() {
        return lugar;
    }

    public void setLugar(String lugar) {
        this.lugar = lugar;
    }

//validador de lugar

 public static void validarLugar(String lugar){
       Scanner scanner = new Scanner(System.in);
        while (true){
            //Dentro del bucle while (true), se muestra un mensaje solicitando el ingreso del lugar
            System.out.println("Ingrese el lugar(campo obligatorio minimo de 10 a maximo 50 caracteres");
            lugar = scanner.nextLine();
            //la validacion se realiza con el if //
            if (!lugar.isEmpty() && lugar.length() >= 10 && lugar.length() <= 50){
                break;
                // si la validacion se cumple se rompe el bucle//
            } else {
                System.out.println("lugar no cumple con requisitos,intente nuevamente");
            }
            return;
        }
    }
    
    public String getComentarios() {
        return comentarios;
    }

    public void setComentarios(String comentarios) {
        this.comentarios = comentarios;
    }
  // validador comentarios
  
   public static void validarComentarios(String comentarios){
        Scanner scanner = new Scanner(System.in);
        while (true){
            System.out.println("Ingrese el comentario (máximo 100 caracteres): ");
            comentarios = scanner.nextLine();
            if (comentarios.length() <= 100){
                break;
            } else {
                // si los requisitos no se cumplen arrojara error
                System.out.println("El comentario excede el límite de 100 caracteres. Intente nuevamente.");

            }

        }

    }

}
